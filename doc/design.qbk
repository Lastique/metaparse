[section The design of the library]

The purpose of the library is to provide tools to build template metaprograms
being able to interpret the content of a string literal and generate code,
display error messages, etc based on the content of the string literal. Such
metaprograms are called [link parser parser]s. Metaparse is based on
[@https://en.wikipedia.org/wiki/Parser_combinator parser combinators].


The key components of the library:

* [link ref-string Compile-time string representation]. These are tools for
  representing the content of a string literal in a way that makes it possible
  for template metaprograms to work on them. For this the library provides the
  [link string `string`] template class, which is a drop-in replacement of
  Boost.MPL's `string` implementation, and the [link BOOST_METAPARSE_STRING
  `BOOST_METAPARSE_STRING`] macro.

* [link parsers Parsers]. These are template metafunction classes parsing a
  prefix of a string literal. These are simple [link parser parser]s providing
  the basic building blocks for more complicated ones doing some useful work.

* [link combinators Parser combinators]. These are
  [link metafunction template metafunction]s taking [link parser parser]s as
  argument and/or returning [link parser parser]s as their result. They can be
  used to build more and more complex [link parser parser]s out of the simple
  ones.

[endsect]

