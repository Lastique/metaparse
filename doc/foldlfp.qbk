[#foldlfp]
[section foldlfp]

[h1 Synopsis]

  template <class P, class StateP, class ForwardOp>
  struct foldlfp;

This is a [link parser_combinator parser combinator].

[table Arguments
  [[Name]         [Type]]
  [[`P`]          [[link parser parser]]]
  [[`StateP`]     [[link parser parser]]]
  [[`ForwardOp`]  [[link metafunction_class template metafunction class] taking two arguments]]
]

[h1 Description]

The same as [link foldlp `foldlp`], but once `P` rejects the input, `foldlfp`
checks if `P` consumes any characters before rejecting the input. If so,
`foldlfp` rejects the input with the same error message this last application of
`P` returned. Otherwise `foldlfp` accepts the input and gives the same result as
[link foldlp `foldlp`].

Here is a diagram showing how `foldlfp` works by example:

  using int_token = token<int_>;
  using plus_token = token<lit_c<'+'>>;
  using plus_int = last_of<plus_token, int_token>;
  using sum_op = mpl::lambda<mpl::plus<mpl::_1, mpl::_2>>::type;

[$foldlfp_diag1.png [width 70%]]

Further details can be found in the
[link introducing-foldlfp Introducing foldlfp] section of the
[link manual User Manual].

[h1 Header]

  #include <boost/metaparse/foldlfp.hpp>

[h1 Expression semantics]

For any `p` parser, `pt` class, `f` metafunction class taking two arguments,
`s` compile-time string and `pos` source position

  foldlfp<p, pt, f>::apply<s, pos>

is equivalent to

  first_of<
    foldlp<p, pt, f>,
    fail_at_first_char_expected<p>
  >::apply<s, pos>

[h1 Example]

  #include <boost/metaparse/foldlfp.hpp>
  #include <boost/metaparse/lit_c.hpp>
  #include <boost/metaparse/last_of.hpp>
  #include <boost/metaparse/token.hpp>
  #include <boost/metaparse/int_.hpp>
  #include <boost/metaparse/string.hpp>
  #include <boost/metaparse/start.hpp>
  #include <boost/metaparse/get_result.hpp>
  #include <boost/metaparse/is_error.hpp>
  
  #include <boost/mpl/lambda.hpp>
  #include <boost/mpl/plus.hpp>
  
  using namespace boost::metaparse;
  
  using int_token = token<int_>;
  using plus_token = token<lit_c<'+'>>;
  using plus_int = last_of<plus_token, int_token>;
  using sum_op =
    boost::mpl::lambda<boost::mpl::plus<boost::mpl::_1, boost::mpl::_2>>::type;
  
  using ints = foldlfp<plus_int, int_token, sum_op>;
  
  static_assert(
    get_result<
      ints::apply<BOOST_METAPARSE_STRING("11 + 13 + 3 + 21"), start>
    >::type::value == 48,
    "ints should sum the numbers"
  );
  
  static_assert(
    is_error<
      ints::apply<BOOST_METAPARSE_STRING("11 + 13 + 3 +"), start>
    >::type::value,
    "when the last number is missing, it should be an error"
  );

[endsect]

